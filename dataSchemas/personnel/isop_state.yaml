isop_id:
  _get_id: "isop_id"
mechanism_of_injury:
  dateTime: "!" # required: true Q: "When did the incident happen?" 
  dateTime_accuracy: # required: false Q: "Select the accuracy of the date and time of the incident." NOTE: this could affect forecast confidence scores
    selection_type: single!
    options:
      - 1: "accurate"
      - 2: "moderately accurate"
      - 3: "estimated"
  summary: # required: false Q: "Describe the incident and mechanism of injury."
  types: # required: false Q: "Select the mechanism of injury." NOTE - for now may not align with insults generated
    _generate_list: # ignore - used for data generation only
      schema: "../dataSchemas/injuries/MOIs.yaml" # location of schema file to generate data from
      count: (1,3) # value or range of instances to generate


evacuation_category: # required: true Q: "Select the category of evacuation."
  selection_type: single! 
  options:
    - litter: L # will require litter
    - ambulatory: A # able to move

# # A list of location timestamps to track an ISOP movement or preplanned evacuation path.
# # Can run evaluations of average_speed over time that might indicate complications like phsyiologic decompensation, tough terrain, enemy pursuit, etc
# # Can project ETAs to preplanned waypoints  
# locations: # required: true Q: "Enter the ISOP's last known lat and long coordinates (if not available)"
#   _generate_timestamps: # ignore - used for data generation only
#     schema: "../dataSchemas/locations/timestamp_location.yaml" # location of schema file to generate data from
#     count: (0,2) # value or range of instances to generate
#     timedelta(min): (5,60) # range of minutes to randomly increment timestamps

# timeseries list as Triage score may improve or worsen over time and will be dyncamically evaluated
triage: # required: true Triage Score and Category should be automatically updated with each new entry into the patient record
  # - timestamp:
  #   category: # Should be assigned based on Triage Score: [immediate, urgent, expectant, delayed, minor, uninjured] 
  #   _LIFE: #(0,100) Requires NISS + RTS
  #   _RTS: #(0,12) Requires GCS, SBP, RR  NOTE if not available directly then there are a few options...
  #       - GCS can be inferred via communication with ISOP...Q: "Do they appear coherent?", then GCS = 13-15, "Is their speech slurred?", then GCS = 8-12
  #       - SBP and RR can be estimated via casualty simulation data based on known injuries, specific ISOP physiology, and known interventions
  #       - RR can be validated via communication with ISOP...Q: "Count your breaths for 30 sec and let me know what you get..." or Q: "What does their breathing sound like?" [normal, rapid and shallow, difficult and raspy, etc]
  #   _NISS: #(1,75) Requires Insult Type, Location, AIS
  #       - "Describe your injuries. Include the type of injury, the location, and severity."     
  #   _START: #(0,3)
  #   _SALT: 
  #   _ESI: 
  #   _WEST: 
  #   _ASMcc:
forecasts:
  interventions:
    _generate_list:
      schema: "../dataSchemas/life_saving_interventions/LSIs.yaml"
      count: (0,2) # value or range of instances to generate
      timestamp:
        timedelta(min): (0, 120) # range of minutes to randomly increment timestamps
        start_in: future
        start_window: (30, 180) # range of minutes to randomly start the timestamps from



patient_record:
  insults:
    _generate_list:
      schema: "../dataSchemas/injuries/insults.yaml"
      count: (0,3) 
      timestamp:
        timedelta(min): (10,15) 
        start_in: past
        start_window: (60, 240)
  vitals:
    _generate_list:
      schema: "../dataSchemas/vitals/vital_instances.yaml"
      count: (0,10) 
      timestamp:
        timedelta(min): (0,15) 
        start_in: past
        start_window: (60, 240)
  observations:
    _generate_list:
      schema: "../dataSchemas/observations/timestamp_observations.yaml"
      count: (0,4) 
      timestamp:
        timedelta(min): (15,60) 
        start_in: past
        start_window: (60, 240)
  interventions:
  medications:

# patient_record: # Progression of insults and injuries over time, observations, interventions, and vitals
#   _generate_timestamps: # ignore - used for data generation only
#     schemas: 
#       - schema: "../schemas/injuries/timestamp_insult.yaml"
#         # max_count: (1,3)
#         # allow_duplicate: false
#         # no_duplicate_combination_of_fields: [location, sublocation, lateral_position, coronal_position]
#       - schema: "../schemas/vitals/timestamp_vitals.yaml"
#       - schema: "../schemas/observations/timestamp_observations.yaml"
#     count: (10,15) # value or range of instances to generate
#     timestamp:
#       timedelta(min): (1,60) # range of minutes to randomly increment timestamps
#       time_direction: past
#       start_window: (60, 240) # range of minutes to randomly start the timestamps from
resources: #list
  current:
  used:

